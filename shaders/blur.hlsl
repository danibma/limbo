#include "bindings.hlsli"

#define BLOCK_SIZE 512

// Generated by https://lisyarus.github.io/blog/graphics/2023/02/24/blur-coefficients-generator.html
// 7x7 Kernel size, 2.8 sigma.
#define SAMPLE_COUNT 7
static const float OFFSETS[SAMPLE_COUNT] = { -5.333105835470851, -3.3913319905458703, -1.4528150823538653, 0.4842301631262852, 2.42177044336388, 4.361713020153613, 6 };
static const float WEIGHTS[SAMPLE_COUNT] = { 0.04478722973395423, 0.1346844972331649, 0.24819975423522495, 0.28046819967630454, 0.19436673698947315, 0.08257469455292463, 0.014918887578953783 };

uint InputTextureIdx;
RWTexture2D<float4> OutputTexture;

[numthreads(BLOCK_SIZE, 1, 1)]
void Blur_Horizontal(uint2 threadID : SV_DispatchThreadID)
{
    Texture2D inputTexture = GetTexture(InputTextureIdx);
    float width, height;
    inputTexture.GetDimensions(width, height);
    float2 size = float2(width, height);
    float2 texelSize = 1 / size;
    float2 texcoords = texelSize * (threadID + 0.5);

    float4 result = 0;
    for (int i = 0; i < SAMPLE_COUNT; ++i)
    {
        float2 offset = float2(1, 0) * OFFSETS[i] / size;
        float weight = WEIGHTS[i];
        result += inputTexture.SampleLevel(SLinearWrap, texcoords + offset, 0) * weight;
    }

    OutputTexture[threadID] = result;
}

[numthreads(1, BLOCK_SIZE, 1)]
void Blur_Vertical(uint2 threadID : SV_DispatchThreadID)
{
    Texture2D inputTexture = GetTexture(InputTextureIdx);
    float width, height;
    inputTexture.GetDimensions(width, height);
    float2 size = float2(width, height);
    float2 texelSize = 1 / size;
    float2 texcoords = texelSize * (threadID + 0.5);

    float4 result = 0;
    for (int i = 0; i < SAMPLE_COUNT; ++i)
    {
        float2 offset = float2(0, 1) * OFFSETS[i] / size;
        float weight = WEIGHTS[i];
        result += inputTexture.SampleLevel(SLinearWrap, texcoords + offset, 0) * weight;
    }

    OutputTexture[threadID] = result;
}